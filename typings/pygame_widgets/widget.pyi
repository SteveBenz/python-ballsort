"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from pygame.event import Event

class WidgetBase(ABC):
    def __init__(self, win, x, y, width, height, isSubWidget=...) -> None:
        """ Base for all widgets

        :param win: Surface on which to draw
        :type win: pygame.Surface
        :param x: X-coordinate of top left
        :type x: int
        :param y: Y-coordinate of top left
        :type y: int
        :param width: Width of button
        :type width: int
        :param height: Height of button
        :type height: int
        """
        ...
    
    @abstractmethod
    def listen(self, events): # -> None:
        ...
    
    @abstractmethod
    def draw(self): # -> None:
        ...
    
    def contains(self, x, y):
        ...
    
    def hide(self): # -> None:
        ...
    
    def show(self): # -> None:
        ...
    
    def disable(self): # -> None:
        ...
    
    def enable(self): # -> None:
        ...
    
    def isSubWidget(self): # -> Unknown:
        ...
    
    def moveToTop(self): # -> None:
        ...
    
    def moveX(self, x): # -> None:
        ...
    
    def moveY(self, y): # -> None:
        ...
    
    def get(self, attr): # -> Unknown | None:
        """Default setter for any attributes. Call super if overriding

        :param attr: Attribute to get
        :return: Value of the attribute
        """
        ...
    
    def getX(self): # -> Unknown:
        ...
    
    def getY(self): # -> Unknown:
        ...
    
    def getWidth(self): # -> Unknown:
        ...
    
    def getHeight(self): # -> Unknown:
        ...
    
    def set(self, attr, value): # -> None:
        """Default setter for any attributes. Call super if overriding

        :param attr: Attribute to set
        :param value: Value to set
        """
        ...
    
    def setX(self, x): # -> None:
        ...
    
    def setY(self, y): # -> None:
        ...
    
    def setWidth(self, width): # -> None:
        ...
    
    def setHeight(self, height): # -> None:
        ...
    


class WidgetHandler:
    _widgets: [WidgetBase] = ...
    @staticmethod
    def main(events: [Event]) -> None:
        ...
    
    @staticmethod
    def addWidget(widget: WidgetBase) -> None:
        ...
    
    @staticmethod
    def moveToTop(widget: WidgetBase): # -> None:
        ...
    
    @staticmethod
    def getWidgets() -> [WidgetBase]:
        ...
    


