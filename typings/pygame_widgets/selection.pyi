"""
This type stub file was generated by pyright.
"""

from pygame_widgets.widget import WidgetBase

class Checkbox(WidgetBase):
    def __init__(self, win, x, y, width, height, items, **kwargs) -> None:
        """ A list of buttons that allows multiple selections

        :param win: Surface on which to draw
        :type win: pygame.Surface
        :param x: X-coordinate of top left
        :type x: int
        :param y: Y-coordinate of top left
        :type y: int
        :param width: Width of list
        :type width: int
        :param height: Height of list
        :type height: int
        :param items: Names of list items
        :type items: tuple of str
        :param kwargs: Optional parameters
        """
        ...
    
    def createTextRects(self): # -> list[Unknown]:
        ...
    
    def createBoxLocations(self): # -> list[Unknown]:
        ...
    
    def listen(self, events): # -> None:
        """ Wait for inputs

        :param events: Use pygame.event.get()
        :type events: list of pygame.event.Event
        """
        ...
    
    def draw(self): # -> None:
        """ Display to surface """
        ...
    
    def getSelected(self): # -> list[Unknown]:
        ...
    


class Radio(WidgetBase):
    def __init__(self, win, x, y, width, height, items, **kwargs) -> None:
        """ A list of buttons that allows a single selections

        :param win: Surface on which to draw
        :type win: pygame.Surface
        :param x: X-coordinate of top left
        :type x: int
        :param y: Y-coordinate of top left
        :type y: int
        :param width: Width of list
        :type width: int
        :param height: Height of list
        :type height: int
        :param items: Names of list items
        :type items: tuple of str
        :param kwargs: Optional parameters
        """
        ...
    
    def createTextRects(self): # -> list[Unknown]:
        ...
    
    def createCircleLocations(self): # -> list[Unknown]:
        ...
    
    def listen(self, events): # -> None:
        """ Wait for inputs

        :param events: Use pygame.event.get()
        :type events: list of pygame.event.Event
        """
        ...
    
    def draw(self): # -> None:
        """ Display to surface """
        ...
    


if __name__ == '__main__':
    win = ...
    checkbox = ...
    radio = ...
    run = ...
