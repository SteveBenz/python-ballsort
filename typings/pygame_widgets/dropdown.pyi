"""
This type stub file was generated by pyright.
"""

from pygame_widgets.widget import WidgetBase

class Dropdown(WidgetBase):
    def __init__(self, win, x, y, width, height, name, choices, isSubWidget=..., **kwargs) -> None:
        ...
    
    def listen(self, events): # -> None:
        """ Wait for input

        :param events: Use pygame.event.get()
        :type events: list of pygame.event.Event
        """
        ...
    
    def draw(self): # -> None:
        ...
    
    def contains(self, x, y): # -> bool:
        ...
    
    def reset(self): # -> None:
        ...
    
    def getSelected(self): # -> str | None:
        ...
    
    def toggleDropped(self): # -> None:
        ...
    
    def isDropped(self): # -> bool:
        ...
    
    @property
    def chosen(self): # -> DropdownChoice | None:
        ...
    
    @chosen.setter
    def chosen(self, newChosen): # -> None:
        ...
    
    def setDropped(self, drop): # -> None:
        ...
    


class DropdownChoice(WidgetBase):
    def __init__(self, win, x, y, width, height, text: str, dropdown: Dropdown, last: bool, **kwargs) -> None:
        ...
    
    def draw(self): # -> None:
        ...
    
    def listen(self, events):
        """Wait for inputs

        :param events: Use pygame.event.get()
        :type events: list of pygame.event.Event
        """
        ...
    
    def contains(self, x, y) -> bool:
        ...
    
    @property
    def text(self): # -> str:
        ...
    
    @text.setter
    def text(self, newText): # -> None:
        ...
    
    @property
    def direction(self): # -> str:
        ...
    
    @property
    def last(self): # -> bool:
        ...
    
    @last.setter
    def last(self, newLast): # -> None:
        ...
    
    @direction.setter
    def direction(self, newDirection): # -> None:
        ...
    
    @property
    def computedX(self):
        ...
    
    @property
    def computedY(self):
        ...
    


class HeadDropdown(DropdownChoice):
    def __init__(self, win, x, y, width, height, text, dropdown, **kwargs) -> None:
        ...
    
    def listen(self, events):
        """Wait for inputs

        :param events: Use pygame.event.get()
        :type events: list of pygame.event.Event
        """
        ...
    
    @property
    def text(self): # -> str | Unknown:
        ...
    


if __name__ == '__main__':
    win = ...
    dropdown = ...
    def printValue(): # -> None:
        ...
    
    button = ...
    run = ...
